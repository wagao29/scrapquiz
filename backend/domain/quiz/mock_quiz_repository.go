// Code generated by MockGen. DO NOT EDIT.
// Source: domain/quiz/quiz_repository.go
//
// Generated by this command:
//
//	mockgen -package quiz -source domain/quiz/quiz_repository.go -destination domain/quiz/mock_quiz_repository.go
//

// Package quiz is a generated GoMock package.
package quiz

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQuizRepository is a mock of QuizRepository interface.
type MockQuizRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuizRepositoryMockRecorder
}

// MockQuizRepositoryMockRecorder is the mock recorder for MockQuizRepository.
type MockQuizRepositoryMockRecorder struct {
	mock *MockQuizRepository
}

// NewMockQuizRepository creates a new mock instance.
func NewMockQuizRepository(ctrl *gomock.Controller) *MockQuizRepository {
	mock := &MockQuizRepository{ctrl: ctrl}
	mock.recorder = &MockQuizRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizRepository) EXPECT() *MockQuizRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockQuizRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQuizRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuizRepository)(nil).Delete), ctx, id)
}

// Save mocks base method.
func (m *MockQuizRepository) Save(ctx context.Context, quiz *Quiz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, quiz)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockQuizRepositoryMockRecorder) Save(ctx, quiz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockQuizRepository)(nil).Save), ctx, quiz)
}
