// Code generated by MockGen. DO NOT EDIT.
// Source: domain/answer/answer_repository.go
//
// Generated by this command:
//
//	mockgen -package answer -source domain/answer/answer_repository.go -destination domain/answer/mock_answer_repository.go
//

// Package answer is a generated GoMock package.
package answer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnswerRepository is a mock of AnswerRepository interface.
type MockAnswerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerRepositoryMockRecorder
}

// MockAnswerRepositoryMockRecorder is the mock recorder for MockAnswerRepository.
type MockAnswerRepositoryMockRecorder struct {
	mock *MockAnswerRepository
}

// NewMockAnswerRepository creates a new mock instance.
func NewMockAnswerRepository(ctrl *gomock.Controller) *MockAnswerRepository {
	mock := &MockAnswerRepository{ctrl: ctrl}
	mock.recorder = &MockAnswerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerRepository) EXPECT() *MockAnswerRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockAnswerRepository) Save(ctx context.Context, quiz *Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, quiz)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAnswerRepositoryMockRecorder) Save(ctx, quiz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAnswerRepository)(nil).Save), ctx, quiz)
}
