// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package dbgen

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
   id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO
   users (id, name, avatar_url, created_at, updated_at)
VALUES
   (
      $1,
      $2,
      $3,
      NOW(),
      NOW()
   )
`

type InsertUserParams struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.ID, arg.Name, arg.AvatarUrl)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
   name = $1,
   avatar_url = $2,
   updated_at = NOW()
WHERE
   id = $3
`

type UpdateUserParams struct {
	Name      string `json:"name"`
	AvatarUrl string `json:"avatar_url"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.AvatarUrl, arg.ID)
	return err
}

const userFindAll = `-- name: UserFindAll :many
SELECT
   id, name, avatar_url, created_at, updated_at
FROM
   users
`

func (q *Queries) UserFindAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, userFindAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFindByID = `-- name: UserFindByID :one
SELECT
   id, name, avatar_url, created_at, updated_at
FROM
   users
WHERE
   id = $1
`

func (q *Queries) UserFindByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, userFindByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
