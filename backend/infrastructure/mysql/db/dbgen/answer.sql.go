// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: answer.sql

package dbgen

import (
	"context"
)

const fetchAnswerCountsByQuizID = `-- name: FetchAnswerCountsByQuizID :many
SELECT
  answer_num, 
  COUNT(*) AS count
FROM
  answers
WHERE
  quiz_id = ?
GROUP BY 
  answer_num
`

type FetchAnswerCountsByQuizIDRow struct {
	AnswerNum int8  `json:"answer_num"`
	Count     int64 `json:"count"`
}

func (q *Queries) FetchAnswerCountsByQuizID(ctx context.Context, quizID string) ([]FetchAnswerCountsByQuizIDRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAnswerCountsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchAnswerCountsByQuizIDRow{}
	for rows.Next() {
		var i FetchAnswerCountsByQuizIDRow
		if err := rows.Scan(&i.AnswerNum, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAnswer = `-- name: InsertAnswer :exec
INSERT INTO
  answers (quiz_id, user_id, answer_num, created_at)
VALUES
  (
    ?,
    ?,
    ?,
    NOW()
  )
`

type InsertAnswerParams struct {
	QuizID    string `json:"quiz_id"`
	UserID    string `json:"user_id"`
	AnswerNum int8   `json:"answer_num"`
}

func (q *Queries) InsertAnswer(ctx context.Context, arg InsertAnswerParams) error {
	_, err := q.db.ExecContext(ctx, insertAnswer, arg.QuizID, arg.UserID, arg.AnswerNum)
	return err
}
