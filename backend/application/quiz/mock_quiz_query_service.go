// Code generated by MockGen. DO NOT EDIT.
// Source: application/quiz/quiz_query_service.go
//
// Generated by this command:
//
//	mockgen -package quiz -source application/quiz/quiz_query_service.go -destination application/quiz/mock_quiz_query_service.go
//

// Package quiz is a generated GoMock package.
package quiz

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQuizQueryService is a mock of QuizQueryService interface.
type MockQuizQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockQuizQueryServiceMockRecorder
}

// MockQuizQueryServiceMockRecorder is the mock recorder for MockQuizQueryService.
type MockQuizQueryServiceMockRecorder struct {
	mock *MockQuizQueryService
}

// NewMockQuizQueryService creates a new mock instance.
func NewMockQuizQueryService(ctrl *gomock.Controller) *MockQuizQueryService {
	mock := &MockQuizQueryService{ctrl: ctrl}
	mock.recorder = &MockQuizQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizQueryService) EXPECT() *MockQuizQueryServiceMockRecorder {
	return m.recorder
}

// FetchLatestQuizzes mocks base method.
func (m *MockQuizQueryService) FetchLatestQuizzes(ctx context.Context, limit, offset int) ([]*QuizQueryServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestQuizzes", ctx, limit, offset)
	ret0, _ := ret[0].([]*QuizQueryServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestQuizzes indicates an expected call of FetchLatestQuizzes.
func (mr *MockQuizQueryServiceMockRecorder) FetchLatestQuizzes(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestQuizzes", reflect.TypeOf((*MockQuizQueryService)(nil).FetchLatestQuizzes), ctx, limit, offset)
}

// FetchQuizByID mocks base method.
func (m *MockQuizQueryService) FetchQuizByID(ctx context.Context, userID string) (*QuizQueryServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuizByID", ctx, userID)
	ret0, _ := ret[0].(*QuizQueryServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuizByID indicates an expected call of FetchQuizByID.
func (mr *MockQuizQueryServiceMockRecorder) FetchQuizByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuizByID", reflect.TypeOf((*MockQuizQueryService)(nil).FetchQuizByID), ctx, userID)
}

// FetchQuizCounts mocks base method.
func (m *MockQuizQueryService) FetchQuizCounts(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuizCounts", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuizCounts indicates an expected call of FetchQuizCounts.
func (mr *MockQuizQueryServiceMockRecorder) FetchQuizCounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuizCounts", reflect.TypeOf((*MockQuizQueryService)(nil).FetchQuizCounts), ctx)
}

// FetchQuizCountsByUserID mocks base method.
func (m *MockQuizQueryService) FetchQuizCountsByUserID(ctx context.Context, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuizCountsByUserID", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuizCountsByUserID indicates an expected call of FetchQuizCountsByUserID.
func (mr *MockQuizQueryServiceMockRecorder) FetchQuizCountsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuizCountsByUserID", reflect.TypeOf((*MockQuizQueryService)(nil).FetchQuizCountsByUserID), ctx, userID)
}

// FetchQuizzesByUserID mocks base method.
func (m *MockQuizQueryService) FetchQuizzesByUserID(ctx context.Context, userID string, limit, offset int) ([]*QuizQueryServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuizzesByUserID", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*QuizQueryServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuizzesByUserID indicates an expected call of FetchQuizzesByUserID.
func (mr *MockQuizQueryServiceMockRecorder) FetchQuizzesByUserID(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuizzesByUserID", reflect.TypeOf((*MockQuizQueryService)(nil).FetchQuizzesByUserID), ctx, userID, limit, offset)
}

// FetchRandomQuizzes mocks base method.
func (m *MockQuizQueryService) FetchRandomQuizzes(ctx context.Context, limit int) ([]*QuizQueryServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRandomQuizzes", ctx, limit)
	ret0, _ := ret[0].([]*QuizQueryServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRandomQuizzes indicates an expected call of FetchRandomQuizzes.
func (mr *MockQuizQueryServiceMockRecorder) FetchRandomQuizzes(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRandomQuizzes", reflect.TypeOf((*MockQuizQueryService)(nil).FetchRandomQuizzes), ctx, limit)
}
