// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/answer/answer_query_service.go
//
// Generated by this command:
//
//	mockgen -package answer -source usecase/answer/answer_query_service.go -destination usecase/answer/mock_answer_query_service.go
//

// Package answer is a generated GoMock package.
package answer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnswerQueryService is a mock of AnswerQueryService interface.
type MockAnswerQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerQueryServiceMockRecorder
}

// MockAnswerQueryServiceMockRecorder is the mock recorder for MockAnswerQueryService.
type MockAnswerQueryServiceMockRecorder struct {
	mock *MockAnswerQueryService
}

// NewMockAnswerQueryService creates a new mock instance.
func NewMockAnswerQueryService(ctrl *gomock.Controller) *MockAnswerQueryService {
	mock := &MockAnswerQueryService{ctrl: ctrl}
	mock.recorder = &MockAnswerQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerQueryService) EXPECT() *MockAnswerQueryServiceMockRecorder {
	return m.recorder
}

// FetchAnswerCountsByQuizID mocks base method.
func (m *MockAnswerQueryService) FetchAnswerCountsByQuizID(ctx context.Context, quizID string) (*AnswerQueryServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAnswerCountsByQuizID", ctx, quizID)
	ret0, _ := ret[0].(*AnswerQueryServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAnswerCountsByQuizID indicates an expected call of FetchAnswerCountsByQuizID.
func (mr *MockAnswerQueryServiceMockRecorder) FetchAnswerCountsByQuizID(ctx, quizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAnswerCountsByQuizID", reflect.TypeOf((*MockAnswerQueryService)(nil).FetchAnswerCountsByQuizID), ctx, quizID)
}
